{
  "id": "116",
  "names": [
    "MSR",
    "(Banked register)"
  ],
  "operation": {
    "lines": [
      "if ConditionPassed() then",
      "    EncodingSpecificOperations();",
      "    if PSTATE.EL == EL0 then",
      "        UNPREDICTABLE;",
      "    else",
      "        mode = PSTATE.M;",
      "        if write_spsr then",
      "            SPSRaccessValid(SYSm, mode);             // Check for UNPREDICTABLE cases",
      "            case SYSm of",
      "                when '01110' SPSR_fiq = R[n];",
      "                when '10000' SPSR_irq = R[n];",
      "                when '10010' SPSR_svc = R[n];",
      "                when '10100' SPSR_abt = R[n];",
      "                when '10110' SPSR_und = R[n];",
      "                when '11100'",
      "                    if !ELUsingAArch32(EL3) then AArch64.MonitorModeTrap();",
      "                    SPSR_mon = R[n];",
      "                when '11110' SPSR_hyp = R[n];",
      "        else",
      "            BankedRegisterAccessValid(SYSm, mode); // Check for UNPREDICTABLE cases",
      "            case SYSm of",
      "                when '00xxx'                       // Access the User mode registers",
      "                    m = UInt(SYSm<2:0>) + 8;",
      "                    Rmode[m,M32_User] = R[n];",
      "                when '01xxx'                       // Access the FIQ mode registers",
      "                    m = UInt(SYSm<2:0>) + 8;",
      "                    Rmode[m,M32_FIQ] = R[n];",
      "                when '1000x'                       // Access the IRQ mode registers",
      "                    m = 14 - UInt(SYSm<0>);        // LR when SYSm<0> == 0, otherwise SP",
      "                    Rmode[m,M32_IRQ] = R[n];",
      "                when '1001x'                       // Access the Supervisor mode regsiters",
      "                    m = 14 - UInt(SYSm<0>);        // LR when SYSm<0> == 0, otherwise SP",
      "                    Rmode[m,M32_Svc] = R[n];",
      "                when '1010x'                       // Access the Abort mode registers",
      "                    m = 14 - UInt(SYSm<0>);        // LR when SYSm<0> == 0, otherwise SP",
      "                    Rmode[m,M32_Abort] = R[n];",
      "                when '1011x'                       // Access the Undefined mode registers",
      "                    m = 14 - UInt(SYSm<0>);        // LR when SYSm<0> == 0, otherwise SP",
      "                    Rmode[m,M32_Undef] = R[n];",
      "                when '1110x'                       // Access Monitor registers",
      "                    if !ELUsingAArch32(EL3) then AArch64.MonitorModeTrap();",
      "                    m = 14 - UInt(SYSm<0>);        // LR when SYSm<0> == 0, otherwise SP",
      "                    Rmode[m,M32_Monitor] = R[n];",
      "                when '11110'                       // Access ELR_hyp register",
      "                    ELR_hyp = R[n];",
      "                when '11111'                       // Access SP_hyp register",
      "                    Rmode[13,M32_Hyp] = R[n];"
    ]
  }
}
